%make_hypnogram_figure(txt_filename,model_output_sleepstate)
%
%
% SCRIPT:  
% USAGE:  make_hypnogram_figure(txt_filename,model_output_sleepstate)
%
% 
% This function takes the output from two_process_model_with_markov_chain.m and makes a hypnogram of the simulation output and 
% also plots a hypnogram of the experimental data 
%
% 
% INPUTS:
%  txt_filename:		file name of a text file with sleep state in the second column
%  model_output_sleepstate:	a cell array (or vector) of sleep states generated by the model


AW_txt_file = '6_AW_LD_workday1.txt'
RW_txt_file = '9_RW_LD_workday1.txt'

%directory = '\\FS1\WisorData\Gronli\Night work, animal model\txt files\Baseline\'
directory = '\\FS1\WisorData\Gronli\Night work, animal model\txt files\Work period\Baseline and workdays\txt files\testing\'

% First run the simulations
[S,sleepstateAW,num_wake_episodesAW,mean_SWS_lengthAW,REMS_episode_duration_AW_averages,...
 std_wake_episodes_vs_timeAW,std_SWS_episode_duration_vs_timeAW,REMS_episode_duration_AW_Std] = two_process_model_with_markov_chain(134,8.6,3.2,'AW',1);

[S,sleepstateRW,num_wake_episodesRW,mean_SWS_lengthRW,REMS_episode_duration_RW_averages,...
 std_wake_episodes_vs_timeRW,std_SWS_episode_duration_vs_timeRW,REMS_episode_duration_RW_Std] = two_process_model_with_markov_chain(134,8.6,3.2,'RW',1);


% Next, load the experimental data, one for each case (AW and RW)
[data,textdataAW]=importdatafile(AW_txt_file,directory);
[data,textdataRW]=importdatafile(RW_txt_file,directory);


% Convert the experimental data sleep states from letters to numbers
for i=1:length(textdataAW)
	if strcmp(textdataAW(i,2),'S')
		experimental_state_AW(i) = 0;
	elseif strcmp(textdataAW(i,2),'R')
		experimental_state_AW(i) = 1;
	elseif strcmp(textdataAW(i,2),'W')
		experimental_state_AW(i) = 2;
	else
		experimental_state_AW(i) = NaN;
	end 
end 

for i=1:length(textdataRW)
	if strcmp(textdataRW(i,2),'S')
		experimental_state_RW(i) = 0;
	elseif strcmp(textdataRW(i,2),'R')
		experimental_state_RW(i) = 1;
	elseif strcmp(textdataRW(i,2),'W')
		experimental_state_RW(i) = 2;
	else
		experimental_state_RW(i) = NaN;
	end 
end 






% Find the most common state for each epoch in the simulatons
%most_common_stateAW = char(mode(double(sleepstateAW),2));
%most_common_stateRW = char(mode(double(sleepstateRW),2));


% TESTING: try just one simulation, not the mode of all of them
most_common_stateAW = sleepstateAW(:,50);
most_common_stateRW = sleepstateRW(:,50);


% now convert them to numbers
for i=1:length(most_common_stateAW)
	if strcmp(most_common_stateAW(i),'S')
		most_common_stateAW_numeric(i) = 0;
	elseif strcmp(most_common_stateAW(i),'R') 
		most_common_stateAW_numeric(i) = 1;
	elseif strcmp(most_common_stateAW(i),'W')
		most_common_stateAW_numeric(i) =2;
	end 
end


for i=1:length(most_common_stateRW)
	if strcmp(most_common_stateRW(i),'S')
		most_common_stateRW_numeric(i) = 0;
	elseif strcmp(most_common_stateRW(i),'R') 
		most_common_stateRW_numeric(i) = 1;
	elseif strcmp(most_common_stateRW(i),'W')
		most_common_stateRW_numeric(i) =2;
	end 
end



% Now plot experimental data and simulation output
t=0:10/60/60:134;
dt=10/60/60;
num_days = 134/24;

t_AW = 0:dt:(length(experimental_state_AW)-1)*dt;
t_RW = 0:dt:(length(experimental_state_RW)-1)*dt;


FigHandle = figure
set(FigHandle,'Position',[300 250 941, 216]);
subplot(2,1,1)
plot(t_AW,experimental_state_AW)

ax=gca;
	ax.XTick = 0:12:t(end);
	set(gca,'XTick',0:24:t(end));	% set major tick marks at 24 hour intervals
	set(gca,'YTick',0:1:2);
	ax.XAxis.MinorTick = 'on';
	ax.XAxis.MinorTickValues = ax.XAxis.Limits(1):12:ax.XAxis.Limits(2);  % set minor tick marks at 8 hour intervals
	ax.TickDir = 'out';
	ax.TickLength = [0.02 0.02];
	ax.LineWidth = 1.5;
	ax.FontSize = 16;
	set(gca,'box','off')
	set(gca,'color','none')
	xlabel('TIME (H)')
text(8.5,-0.3,{'Baseline'},'FontSize',14)
text(34,-0.3,{'Day1'},'FontSize',14)
text(58,-0.3,{'Day2'},'FontSize',14)
text(82,-0.3,{'Day3'},'FontSize',14)
text(106,-0.3,{'Day4'},'FontSize',14)
set(gca,'YTickLabel',{'SWS','REMS','W'});

% add yellow and black rectangles to the top to indicate light
hold on
rectangle('Position',[0 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[12 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[24 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[36 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[48 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[60 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[72 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[84 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[96 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[108 2 12 0.2],'EdgeColor','none','FaceColor','k')
if t(end)>120
	rectangle('Position',[120 2 12 0.2],'EdgeColor','none','FaceColor','y')
end
hold off
axis([0 132 0 2.2])

subplot(2,1,2)
plot(t,most_common_stateAW_numeric(1:end-1))
ax=gca;
	ax.XTick = 0:12:t(end);
	set(gca,'XTick',0:24:t(end));	% set major tick marks at 24 hour intervals
	set(gca,'YTick',0:1:2);
	ax.XAxis.MinorTick = 'on';
	ax.XAxis.MinorTickValues = ax.XAxis.Limits(1):12:ax.XAxis.Limits(2);  % set minor tick marks at 8 hour intervals
	ax.TickDir = 'out';
	ax.TickLength = [0.02 0.02];
	ax.LineWidth = 1.5;
	ax.FontSize = 16;
	set(gca,'box','off')
	set(gca,'color','none')
	xlabel('TIME (H)')
text(8.5,-0.3,{'Baseline'},'FontSize',14)
text(34,-0.3,{'Day1'},'FontSize',14)
text(58,-0.3,{'Day2'},'FontSize',14)
text(82,-0.3,{'Day3'},'FontSize',14)
text(106,-0.3,{'Day4'},'FontSize',14)
set(gca,'YTickLabel',{'SWS','REMS','W'});

% add yellow and black rectangles to the top to indicate light
hold on
rectangle('Position',[0 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[12 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[24 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[36 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[48 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[60 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[72 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[84 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[96 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[108 2 12 0.2],'EdgeColor','none','FaceColor','k')
if t(end)>120
	rectangle('Position',[120 2 12 0.2],'EdgeColor','none','FaceColor','y')
end
hold off
axis([0 132 0 2.2])





% -------------------------------------------------------
figure 
subplot(2,1,1)
plot(t_RW,experimental_state_RW)
ax=gca;
	ax.XTick = 0:12:t(end);
	set(gca,'XTick',0:24:t(end));	% set major tick marks at 24 hour intervals
	set(gca,'YTick',0:1:2);
	ax.XAxis.MinorTick = 'on';
	ax.XAxis.MinorTickValues = ax.XAxis.Limits(1):12:ax.XAxis.Limits(2);  % set minor tick marks at 8 hour intervals
	ax.TickDir = 'out';
	ax.TickLength = [0.02 0.02];
	ax.LineWidth = 1.5;
	ax.FontSize = 16;
	set(gca,'box','off')
	set(gca,'color','none')
	xlabel('TIME (H)')
text(8.5,-0.3,{'Baseline'},'FontSize',14)
text(34,-0.3,{'Day1'},'FontSize',14)
text(58,-0.3,{'Day2'},'FontSize',14)
text(82,-0.3,{'Day3'},'FontSize',14)
text(106,-0.3,{'Day4'},'FontSize',14)
set(gca,'YTickLabel',{'SWS','REMS','W'});

% add yellow and black rectangles to the top to indicate light
hold on
rectangle('Position',[0 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[12 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[24 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[36 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[48 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[60 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[72 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[84 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[96 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[108 2 12 0.2],'EdgeColor','none','FaceColor','k')
if t(end)>120
	rectangle('Position',[120 2 12 0.2],'EdgeColor','none','FaceColor','y')
end
hold off




axis([0 120 0 2.2])






subplot(2,1,2)

%test plotting color based on sleep state
% data = most_common_stateRW_numeric;
% wake = (data>1);
% rem = (data>0.5 & data <1.5);
% sws = (data<0.5);
% wake_line = data;
% rem_line = data;
% sws_line = data;

% wake_line(~wake) = NaN;
% rem_line(~rem) = NaN;
% sws_line(~sws) = NaN;
plot(t,most_common_stateRW_numeric(1:end-1))
% hold on
% plot(t,wake_line(1:end-1),'g.',t,rem_line(1:end-1),'r.',t,sws_line(1:end-1),'b.','MarkerSize',10)
% hold off 
ax=gca;
	ax.XTick = 0:12:t(end);
	set(gca,'XTick',0:24:t(end));	% set major tick marks at 24 hour intervals
	set(gca,'YTick',0:1:2);
	ax.XAxis.MinorTick = 'on';
	ax.XAxis.MinorTickValues = ax.XAxis.Limits(1):12:ax.XAxis.Limits(2);  % set minor tick marks at 8 hour intervals
	ax.TickDir = 'out';
	ax.TickLength = [0.02 0.02];
	ax.LineWidth = 1.5;
	ax.FontSize = 16;
	set(gca,'box','off')
	set(gca,'color','none')
	xlabel('TIME (H)')
text(8.5,-0.3,{'Baseline'},'FontSize',14)
text(34,-0.3,{'Day1'},'FontSize',14)
text(58,-0.3,{'Day2'},'FontSize',14)
text(82,-0.3,{'Day3'},'FontSize',14)
text(106,-0.3,{'Day4'},'FontSize',14)
set(gca,'YTickLabel',{'SWS','REMS','W'});

% add yellow and black rectangles to the top to indicate light
hold on
rectangle('Position',[0 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[12 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[24 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[36 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[48 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[60 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[72 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[84 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[96 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[108 2 12 0.2],'EdgeColor','none','FaceColor','k')
if t(end)>120
	rectangle('Position',[120 2 12 0.2],'EdgeColor','none','FaceColor','y')
end
hold off




axis([0 120 0 2.2])


