%make_hypnogram_figure(txt_filename,model_output_sleepstate)
%
%
% SCRIPT:  
% USAGE:  make_hypnogram_figure(txt_filename,model_output_sleepstate)
%
% 
% This function takes the output from two_process_model_with_markov_chain.m and makes a hypnogram of the simulation output and 
% also plots a hypnogram of the experimental data 
%
% 
% INPUTS:
%  txt_filename:		file name of a text file with sleep state in the second column
%  model_output_sleepstate:	a cell array (or vector) of sleep states generated by the model
run_simulations = 0;

AW_txt_file ='27_AW_LD_workday1.txt';   %'6_AW_LD_workday1.txt';
RW_txt_file ='14_RW_LD_workday1.txt'  %'9_RW_LD_workday1.txt'

%directory = '\\FS1\WisorData\Gronli\Night work, animal model\txt files\Baseline\'
directory = '\\FS1\WisorData\Gronli\Night work, animal model\txt files\Work period\Baseline and workdays\txt files\testing\';

if run_simulations
% set the parameters

input_paramsAW.taui_baseline  = 17.159;%K_taui_taud_gamma_baseline_AW.values(1);
input_paramsAW.taud_baseline  =2.18 ; %K_taui_taud_gamma_baseline_AW.values(2); %K_optimized_using_AW.values(taudA_idx);  %4.5;
input_paramsAW.taui_work = K_optimized_for_AW_during_work_1_5.values(1);
input_paramsAW.taud_work = K_optimized_for_AW_during_work_1_5.values(2);

input_paramsAW.alertness_duration_scale_factor_B = 0.6;  %0.6 is optimized value for baseline
input_paramsAW.sleepiness_duration_scale_factor_SWS_B = 1.133; %1.133 is optimized value for baseline
input_paramsAW.sleepiness_duration_scale_factor_REMS_B = 1.1;  %1.1 is optimized value for baseline
input_paramsAW.alertness_duration_scale_factor_W = 0.7; %K_optimized_for_AW_during_work_1_5.values(3);  %0.88;  %0.6 is optimized value for baseline
input_paramsAW.sleepiness_duration_scale_factor_SWS_W = K_optimized_for_AW_during_work_1_5.values(4);  %1.2117; %1.133 is optimized value for baseline
input_paramsAW.sleepiness_duration_scale_factor_REMS_W = K_optimized_for_AW_during_work_1_5.values(5);  %1.3697;  %1.1 is optimized value for baseline

input_paramsRW.taui_baseline = 17.159; %K_taui_taud_gamma_baseline_AW.values(1);
input_paramsRW.taud_baseline = 2.18; %K_taui_taud_gamma_baseline_AW.values(2); 
input_paramsRW.taui_work = K_optimized_for_RW_during_work_1_5.values(1);
input_paramsRW.taud_work = K_optimized_for_RW_during_work_1_5.values(2);
input_paramsRW.gamma = K_optimized_for_RW_during_work.values(3);

input_paramsRW.alertness_duration_scale_factor_B = 0.6;  %0.6 is optimized value for baseline
input_paramsRW.sleepiness_duration_scale_factor_SWS_B = 1.133;  % 1.133 is optimized value for baseline
input_paramsRW.sleepiness_duration_scale_factor_REMS_B = 1.1;  %1.1 is optimized value for baseline
input_paramsRW.alertness_duration_scale_factor_W = 0.7; %K_optimized_for_AW_during_work_1_5.values(3);  %0.6 is optimized value for baseline
input_paramsRW.sleepiness_duration_scale_factor_SWS_W = K_optimized_for_AW_during_work_1_5.values(4);  % 1.133 is optimized value for baseline
input_paramsRW.sleepiness_duration_scale_factor_REMS_W = K_optimized_for_AW_during_work_1_5.values(5);  %1.1 is optimized value for baseline




% First run the simulations
[S,sleepstateAW,long_wake_eps_timingsAW,sleep_averagesAW,sleep_stdAW] = two_process_model_with_markov_chain(134,input_paramsAW,'AW',1);
[S,sleepstateRW,long_wake_eps_timingsRW,sleep_averagesRW,sleep_stdRW] = two_process_model_with_markov_chain(134,input_paramsRW,'RW',1);

end 

% Next, load the experimental data, one for each case (AW and RW)
[data,textdataAW]=importdatafile(AW_txt_file,directory);
[data,textdataRW]=importdatafile(RW_txt_file,directory);


% Convert the experimental data sleep states from letters to numbers
for i=1:length(textdataAW)
	if strcmp(textdataAW(i,2),'S')
		experimental_state_AW(i) = 0;
	elseif strcmp(textdataAW(i,2),'R')
		experimental_state_AW(i) = 1;
	elseif strcmp(textdataAW(i,2),'W')
		experimental_state_AW(i) = 2;
	else
		experimental_state_AW(i) = NaN;
	end 
end 

for i=1:length(textdataRW)
	if strcmp(textdataRW(i,2),'S')
		experimental_state_RW(i) = 0;
	elseif strcmp(textdataRW(i,2),'R')
		experimental_state_RW(i) = 1;
	elseif strcmp(textdataRW(i,2),'W')
		experimental_state_RW(i) = 2;
	else
		experimental_state_RW(i) = NaN;
	end 
end 






% Find the most common state for each epoch in the simulatons
%most_common_stateAW = char(mode(double(sleepstateAW),2));
%most_common_stateRW = char(mode(double(sleepstateRW),2));


% TESTING: try just one simulation, not the mode of all of them
most_common_stateAW = sleepstateAW(:,50);
most_common_stateRW = sleepstateRW(:,50);


% now convert them to numbers
for i=1:length(most_common_stateAW)
	if strcmp(most_common_stateAW(i),'S')
		most_common_stateAW_numeric(i) = 0;
	elseif strcmp(most_common_stateAW(i),'R') 
		most_common_stateAW_numeric(i) = 1;
	elseif strcmp(most_common_stateAW(i),'W')
		most_common_stateAW_numeric(i) =2;
	end 
end


for i=1:length(most_common_stateRW)
	if strcmp(most_common_stateRW(i),'S')
		most_common_stateRW_numeric(i) = 0;
	elseif strcmp(most_common_stateRW(i),'R') 
		most_common_stateRW_numeric(i) = 1;
	elseif strcmp(most_common_stateRW(i),'W')
		most_common_stateRW_numeric(i) =2;
	end 
end



% Now plot experimental data and simulation output
t=0:10/60/60:134;
dt=10/60/60;
num_days = 134/24;

t_AW = 0:dt:(length(experimental_state_AW)-1)*dt;
t_RW = 0:dt:(length(experimental_state_RW)-1)*dt;
t_AW_numeric = 0:dt:(length(most_common_stateAW_numeric)-1)*dt;
t_RW_numeric = 0:dt:(length(most_common_stateRW_numeric)-1)*dt;


axFontSize = 14;
axlinewidth = 2;
linewidth = 1.5;
title_fontsize = 12;
text_fontsize = 14;
panel_label_fontsize = 24;
exp_simulation_labels_fontsize = 18;
% -------------------------------------------

FigHandle = figure;
set(FigHandle,'Position',[300 30 1130 950]);

% --- First panel, for AW (with 2 subpanels inside, one for experiment, one for simulation) 
p=panel();
p.pack({1/4 1/4 1/4 1/4}, {4/5 1/5});
p(1,1).pack(2,1);
p(2,1).pack(2,1);
p(3,1).pack(2,1);
p(4,1).pack(2,1);
p(1,2).pack(2,1);
p(2,2).pack(2,1);


p.de.margin = 5;
%p(1,2).marginleft = 15;
%p(2,2).marginleft = 15;
p(2).margintop = 15;  %space between rows
p(3).margintop = 20;
p(4).margintop = 15;
p.margin = [20 15 5 5];
p_11 = p(1,1);
p_12 = p(1,2);
p_21 = p(2,1);
p_22 = p(2,2);
p_31 = p(3,1);
p_41 = p(4,1);

p_11(1,1).select();
%subplot(2,1,1)
plot(t_AW,experimental_state_AW)

ax=gca;
	ax.XTick = 0:12:t(end);
	set(gca,'XTick',0:24:t(end));	% set major tick marks at 24 hour intervals
	set(gca,'YTick',0:1:2);
	ax.XAxis.MinorTick = 'on';
	ax.XAxis.MinorTickValues = ax.XAxis.Limits(1):12:ax.XAxis.Limits(2);  % set minor tick marks at 8 hour intervals
	ax.TickDir = 'out';
	ax.TickLength = [0.02 0.02];
	ax.LineWidth = linewidth;
	ax.FontSize = axFontSize;
	ax.XColor = 'none';
	set(gca,'box','off')
	set(gca,'color','none')
	%xlabel('TIME (H)')
% text(8.5,-0.3,{'Baseline'},'FontSize',14)
% text(34,-0.3,{'Day1'},'FontSize',14)
% text(58,-0.3,{'Day2'},'FontSize',14)
% text(82,-0.3,{'Day3'},'FontSize',14)
% text(106,-0.3,{'Day4'},'FontSize',14)
set(gca,'YTickLabel',{'SWS','REMS','W'});
te=text(-10,2.5,'A');
te.FontSize = panel_label_fontsize;  

tex1 = text(125,1,'Experimental Data');
tex1.FontSize = exp_simulation_labels_fontsize;


% add yellow and black rectangles to the top to indicate light
hold on
rectangle('Position',[0 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[12 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[24 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[36 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[48 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[60 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[72 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[84 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[96 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[108 2 12 0.2],'EdgeColor','none','FaceColor','k')
% if t(end)>120
% 	rectangle('Position',[120 2 12 0.2],'EdgeColor','none','FaceColor','y')
% end
hold off
%axis([0 132 0 2.2])
axis([0 120 0 2.2])
%tl=p(1,1).title('Active Phase Workers');
%tl.FontSize = title_fontsize;


p_11(2,1).select();
%subplot(2,1,2)
plot(t_AW_numeric,most_common_stateAW_numeric)
ax=gca;
	ax.XTick = 0:12:t(end);
	set(gca,'XTick',0:24:t(end));	% set major tick marks at 24 hour intervals
	set(gca,'YTick',0:1:2);
	ax.XAxis.MinorTick = 'on';
	ax.XAxis.MinorTickValues = ax.XAxis.Limits(1):12:ax.XAxis.Limits(2);  % set minor tick marks at 8 hour intervals
	ax.TickDir = 'out';
	ax.TickLength = [0.02 0.02];
	ax.LineWidth = linewidth;
	ax.FontSize = axFontSize;
	set(gca,'box','off')
	set(gca,'color','none')
	%xlabel('TIME (H)')
text(8.5,-0.4,{'Baseline'},'FontSize',text_fontsize)
text(34,-0.4,{'Day1'},'FontSize',text_fontsize)
text(58,-0.4,{'Day2'},'FontSize',text_fontsize)
text(82,-0.4,{'Day3'},'FontSize',text_fontsize)
text(106,-0.4,{'Day4'},'FontSize',text_fontsize)
set(gca,'YTickLabel',{'SWS','REMS','W'});

% add yellow and black rectangles to the top to indicate light
hold on
rectangle('Position',[0 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[12 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[24 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[36 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[48 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[60 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[72 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[84 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[96 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[108 2 12 0.2],'EdgeColor','none','FaceColor','k')
if t(end)>120
	rectangle('Position',[120 2 12 0.2],'EdgeColor','none','FaceColor','y')
end

axis([0 120 0 2.2])
tex2 = text(125,1,'Simulation Output');
tex2.FontSize = exp_simulation_labels_fontsize;
r=rectangle('Position',[70 0 10,0.2],'EdgeColor','none','FaceColor','k');  % indicate location of zoomed-in panel
hold off


% -------------------------------------------------------
%FigHandle2=figure; 
%set(FigHandle2,'Position',[300 400 1130, 500]);
%subplot(2,1,1)
%p_21(1,1).select();
p_31(1,1).select();
plot(t_RW,experimental_state_RW)
ax=gca;
	ax.XTick = 0:12:t(end);
	set(gca,'XTick',0:24:t(end));	% set major tick marks at 24 hour intervals
	set(gca,'YTick',0:1:2);
	ax.XAxis.MinorTick = 'on';
	ax.XAxis.MinorTickValues = ax.XAxis.Limits(1):12:ax.XAxis.Limits(2);  % set minor tick marks at 8 hour intervals
	ax.TickDir = 'out';
	ax.TickLength = [0.02 0.02];
	ax.LineWidth = linewidth;
	ax.FontSize = axFontSize;
	ax.XColor = 'none';
	set(gca,'box','off')
	set(gca,'color','none')
	%xlabel('TIME (H)')
% text(8.5,-0.3,{'Baseline'},'FontSize',14)
% text(34,-0.3,{'Day1'},'FontSize',14)
% text(58,-0.3,{'Day2'},'FontSize',14)
% text(82,-0.3,{'Day3'},'FontSize',14)
% text(106,-0.3,{'Day4'},'FontSize',14)
set(gca,'YTickLabel',{'SWS','REMS','W'});
te=text(-10,2.5,'C');
te.FontSize = panel_label_fontsize;

tex1 = text(125,1,'Experimental Data');
tex1.FontSize = exp_simulation_labels_fontsize;

% add yellow and black rectangles to the top to indicate light
hold on
rectangle('Position',[0 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[12 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[24 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[36 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[48 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[60 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[72 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[84 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[96 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[108 2 12 0.2],'EdgeColor','none','FaceColor','k')
if t(end)>120
	rectangle('Position',[120 2 12 0.2],'EdgeColor','none','FaceColor','y')
end
hold off
axis([0 120 0 2.2])
%tl=p(2,1).title('Resting Phase Workers');




p_31(2,1).select();
%subplot(2,1,2)

%test plotting color based on sleep state
% data = most_common_stateRW_numeric;
% wake = (data>1);
% rem = (data>0.5 & data <1.5);
% sws = (data<0.5);
% wake_line = data;
% rem_line = data;
% sws_line = data;

% wake_line(~wake) = NaN;
% rem_line(~rem) = NaN;
% sws_line(~sws) = NaN;
plot(t_RW_numeric,most_common_stateRW_numeric)
% hold on
% plot(t,wake_line(1:end-1),'g.',t,rem_line(1:end-1),'r.',t,sws_line(1:end-1),'b.','MarkerSize',10)
% hold off 
ax=gca;
	ax.XTick = 0:12:t(end);
	set(gca,'XTick',0:24:t(end));	% set major tick marks at 24 hour intervals
	set(gca,'YTick',0:1:2);
	ax.XAxis.MinorTick = 'on';
	ax.XAxis.MinorTickValues = ax.XAxis.Limits(1):12:ax.XAxis.Limits(2);  % set minor tick marks at 8 hour intervals
	ax.TickDir = 'out';
	ax.TickLength = [0.02 0.02];
	ax.LineWidth = linewidth;
	ax.FontSize = axFontSize;
	set(gca,'box','off')
	set(gca,'color','none')
	%xlabel('TIME (H)')
text(8.5,-0.4,{'Baseline'},'FontSize',text_fontsize)
text(34,-0.4,{'Day1'},'FontSize',text_fontsize)
text(58,-0.4,{'Day2'},'FontSize',text_fontsize)
text(82,-0.4,{'Day3'},'FontSize',text_fontsize)
text(106,-0.4,{'Day4'},'FontSize',text_fontsize)
set(gca,'YTickLabel',{'SWS','REMS','W'});

% add yellow and black rectangles to the top to indicate light
hold on
rectangle('Position',[0 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[12 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[24 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[36 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[48 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[60 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[72 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[84 2 12 0.2],'EdgeColor','none','FaceColor','k')
rectangle('Position',[96 2 12 0.2],'EdgeColor','none','FaceColor','y')
rectangle('Position',[108 2 12 0.2],'EdgeColor','none','FaceColor','k')
if t(end)>120
	rectangle('Position',[120 2 12 0.2],'EdgeColor','none','FaceColor','y')
end

axis([0 120 0 2.2])
tex2 = text(125,1,'Simulation Output');
tex2.FontSize = exp_simulation_labels_fontsize;
r=rectangle('Position',[60 0 10,0.2],'EdgeColor','none','FaceColor','k');  % indicate location of zoomed-in panel
hold off



% second column: zoomed-in views of each of the four plots
start_index_AW = find(abs(t_AW-70) < 0.0001);  % 70 hours
end_index_AW   = find(abs(t_AW-80) < 0.0001);   % 80 hours
start_index_RW = find(abs(t_RW-60) < 0.0001);  % 60 hours
end_index_RW   = find(abs(t_RW-70) < 0.0001);  % 70 hours

AW_idx = start_index_AW:end_index_AW;
RW_idx = start_index_RW:end_index_RW;


% top right panel (zoomed-in version of data and model for AW case)
p_21(1,1).select();
plot(t(AW_idx),experimental_state_AW(AW_idx))
set(gca,'box','off');
set(gca,'color','none');
axis([70 80 0 2.2]);
set(gca,'YTickLabel',{'SWS','REMS','W'});
set(gca,'XColor','none');
set(gca,'FontSize',axFontSize);
te=text(69.2,2.4,'B');
te.FontSize = panel_label_fontsize;
tc=text(80.45,1,'Experimental Data');
tc.FontSize = exp_simulation_labels_fontsize;

p_21(2,1).select();
plot(t(AW_idx),most_common_stateAW_numeric(AW_idx))
set(gca,'box','off');
set(gca,'color','none');
axis([70 80 0 2.2])
set(gca,'YTickLabel',{'SWS','REMS','W'});
set(gca,'XColor','none');
set(gca,'FontSize',axFontSize);
tc=text(80.45,1,'Simulation Output');
tc.FontSize = exp_simulation_labels_fontsize;


%bottom right panel
p_41(1,1).select();
plot(t(RW_idx),experimental_state_RW(RW_idx))
set(gca,'box','off')
set(gca,'color','none');
axis([60 70 0 2.2])
set(gca,'YTickLabel',{'SWS','REMS','W'});
set(gca,'XColor','none');
set(gca,'FontSize',axFontSize);
te=text(59.2,2.4,'D');
te.FontSize = panel_label_fontsize;
tc=text(70.45,1,'Experimental Data');
tc.FontSize = exp_simulation_labels_fontsize;

p_41(2,1).select();
plot(t(RW_idx),most_common_stateRW_numeric(RW_idx))
set(gca,'box','off');
set(gca,'color','none');
axis([60 70 0 2.2])
set(gca,'YTickLabel',{'SWS','REMS','W'});
set(gca,'XColor','none');
set(gca,'FontSize',axFontSize);
tc=text(70.45,1,'Simulation Output');
tc.FontSize = exp_simulation_labels_fontsize;
